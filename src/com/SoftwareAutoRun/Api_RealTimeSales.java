/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.SoftwareAutoRun;

import com.softpos.pos.core.controller.BillControl;
import com.softpos.pos.core.controller.BranchControl;
import com.softpos.pos.core.controller.ThaiUtil;
import com.softpos.pos.core.model.BillNoBean;
import com.softpos.pos.core.model.BranchBean;
import com.softpos.pos.core.model.TSaleBean;
import database.ConfigFile;
import database.MySQLConnect;
import database.MySQLConnectWebOnline;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import util.DateConvert;
import util.MSG;

/**
 *
 * @author Dell
 */
public final class Api_RealTimeSales extends javax.swing.JFrame {

    private boolean FlageCheckProcess = false;
    BranchBean branchBean = new BranchBean();
    BranchControl branControl = new BranchControl();
    final private MySQLConnectWebOnline myOnline = new MySQLConnectWebOnline();
    MySQLConnect mysql = new MySQLConnect();
    public String ErrorText = "Log Error.." + "\r\n";
    public String LogQuery = "Log SQL.." + "\r\n";
    String logTab = "Log Check..." + "\r\n";
    DateConvert dc = new DateConvert();

    public Api_RealTimeSales() {
        setUndecorated(true);
        initComponents();

        branchBean = new BranchBean();

        branchBean = BranchControl.getData();
        new Thread(() -> {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Already there
            btnUpload.setVisible(false);
            processRun();
        }).start();
    }

    public void processRun() {
//        uploadSQL();
        try {
//            uploadMaster();
            for (int i = 0; i < 10; i++) {
                Thread.sleep(10 * 1000);
                i = 0;
                uploadCheckConfig();
            }
        } catch (InterruptedException e) {
            try {
                Thread.sleep(30 * 1000 * 2);
            } catch (InterruptedException ex) {
                ErrorText += ex.toString();
                txtLogErr.setText(logTab + ErrorText);
                Logger.getLogger(Api_RealTimeSales.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpload = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLogErr = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        btnUpload.setBackground(new java.awt.Color(255, 255, 255));
        btnUpload.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/upload-icon-18.png"))); // NOI18N
        btnUpload.setText("   Click hear");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        jToggleButton1.setText("-");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("API-AutoSales Online V2.1 15102020/14:10");

        txtLogErr.setColumns(20);
        txtLogErr.setRows(5);
        jScrollPane1.setViewportView(txtLogErr);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 102, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("***webconnect Please check Before Run!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpload)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        uploadCheckConfig();
    }//GEN-LAST:event_btnUploadActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    public void uploadCheckConfig() {
        String sendRealtimeWeb = "";
        sendRealtimeWeb = ConfigFile.getProperties("sendRealtimeWeb");
        try {
            if (sendRealtimeWeb.equals("true")) {
//                for (int a = 0; a < 1; a++) {
//                    a = 0;
                if (FlageCheckProcess != true) {
                    uploadBillno();
                    System.out.println("Exit Loop Billno;\n");
                    ErrorText += ".....Exit Loop Billno;\n";
                    txtLogErr.setText(logTab + ErrorText);
                }
                try {
                    Thread.sleep(10 * 1000);
                } catch (InterruptedException ex) {
                }
                if (FlageCheckProcess != true) {
                    uploadT_Sale();
                    System.out.println("Exit Loop T_Sale\n;");
                    ErrorText += ".....Exit Loop T_Sale\n;";
                    txtLogErr.setText(logTab + ErrorText);
                    try {
                        Thread.sleep(10 * 1000);
                    } catch (InterruptedException ex) {
                        txtLogErr.setText(logTab + ex.toString());
                        Logger.getLogger(Api_RealTimeSales.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (FlageCheckProcess != true) {
                    checkBillVoid();
                    System.out.println("Exit Loop Bill Void\n;");
                    ErrorText += ".....Exit Loop Bill Void\n;";
                    txtLogErr.setText(logTab + ErrorText);
                }
//                }
            }
        } catch (Exception e) {
            ErrorText += e.toString();
            txtLogErr.setText(logTab + ErrorText);
            MSG.NOTICE(e.toString());
        }

    }

    public void uploadBillno() {
        try {
            mysql.close();
            mysql.open();
            myOnline.close();
            myOnline.open();

            DateConvert dc = new DateConvert();
            String sql = "select b_refno from billno where B_SendOnline='N';";
            Statement stmtLocal = mysql.getConnection().createStatement();
            Statement stmtServer = myOnline.getConnection().createStatement();
            Statement stmtLocalUpdate = mysql.getConnection().createStatement();
            try {
                ResultSet rs = stmtLocal.executeQuery(sql);
                while (rs.next()) {
                    FlageCheckProcess = true;
                    BillNoBean billbean = new BillNoBean();
                    BillControl billControl = new BillControl();
                    String refno = rs.getString("b_refno");
                    billbean = billControl.getData(refno);
//                    branchBean = branControl.getBranch();
                    if (billbean.getB_PostDate() == null || billbean.getB_PostDate().equals("null")) {
                        billbean.setB_PostDate(new Date());
                    }
                    if (billbean.getB_InvType() == null || billbean.getB_InvType().equals("null")) {
                        billbean.setB_InvType("");
                    }
                    String sqlUpdateOnline = "INSERT INTO billno VALUES("
                            + "'" + billbean.getB_Refno() + "', '" + billbean.getB_CuponDiscAmt() + "', '" + billbean.getB_Ontime() + "', '" + billbean.getB_LoginTime() + "', '" + billbean.getB_OnDate() + "',"
                            + " '" + billbean.getB_PostDate() + "', '" + billbean.getB_Table() + "', '" + billbean.getB_MacNo() + "', '" + billbean.getB_Cashier() + "', '" + billbean.getB_Cust() + "',"
                            + " '" + billbean.getB_ETD() + "', '" + billbean.getB_Total() + "', '" + billbean.getB_Food() + "', '" + billbean.getB_Drink() + "', '" + billbean.getB_Product() + "',"
                            + " '" + billbean.getB_Service() + "', '" + billbean.getB_ServiceAmt() + "', '" + billbean.getB_ItemDiscAmt() + "', '" + billbean.getB_FastDisc() + "', '" + billbean.getB_FastDiscAmt() + "',"
                            + " '" + billbean.getB_EmpDisc() + "', '" + billbean.getB_EmpDiscAmt() + "', '" + billbean.getB_TrainDisc() + "', '" + billbean.getB_TrainDiscAmt() + "', '" + billbean.getB_MemDisc() + "',"
                            + " '" + billbean.getB_MemDiscAmt() + "', '" + billbean.getB_SubDisc() + "', '" + billbean.getB_SubDiscAmt() + "', '" + billbean.getB_SubDiscBath() + "', '" + billbean.getB_ProDiscAmt() + "',"
                            + " '" + billbean.getB_SpaDiscAmt() + "', '" + billbean.getB_AdjAmt() + "', '" + billbean.getB_PreDisAmt() + "', '" + billbean.getB_NetTotal() + "', '" + billbean.getB_NetFood() + "',"
                            + " '" + billbean.getB_NetDrink() + "', '" + billbean.getB_NetProduct() + "', '" + billbean.getB_NetVat() + "', '" + billbean.getB_NetNonVat() + "',"
                            + " '" + billbean.getB_Vat() + "', '" + billbean.getB_PayAmt() + "', '" + billbean.getB_Cash() + "', '" + billbean.getB_GiftVoucher() + "', '" + billbean.getB_Earnest() + "',"
                            + " '" + billbean.getB_Ton() + "', '" + billbean.getB_CrCode1() + "', '" + billbean.getB_CardNo1() + "', '" + billbean.getB_AppCode1() + "', '" + billbean.getB_CrCharge1() + "',"
                            + " '" + billbean.getB_CrChargeAmt1() + "', '" + billbean.getB_CrAmt1() + "', '" + billbean.getB_AccrCode() + "', '" + billbean.getB_AccrAmt() + "', '" + billbean.getB_AccrCr() + "',"
                            + " '" + billbean.getB_MemCode() + "', '" + billbean.getB_MemName() + "', '" + billbean.getB_MemBegin() + "', '" + billbean.getB_MemEnd() + "', '" + billbean.getB_MemCurSum() + "',"
                            + " '" + billbean.getB_Void() + "', '" + billbean.getB_VoidUser() + "', '" + billbean.getB_VoidTime() + "', '" + billbean.getB_BillCopy() + "', '" + billbean.getB_PrnCnt() + "',"
                            + " '" + billbean.getB_PrnTime1() + "', '" + billbean.getB_PrnTime2() + "', '" + billbean.getB_InvNo() + "', '" + billbean.getB_InvType() + "', '" + branchBean.getCode() + "',"
                            + " '" + billbean.getB_BranName() + "', '" + billbean.getB_Tel() + "', '" + billbean.getB_RecTime() + "', '" + billbean.getMStamp() + "', '" + billbean.getMScore() + "',"
                            + " '" + billbean.getCurStamp() + "', '" + billbean.getStampRate() + "', '" + billbean.getB_ChkBill() + "', '" + billbean.getB_ChkBillTime() + "', '" + billbean.getB_CashTime() + "',"
                            + " '" + billbean.getB_WaitTime() + "', '" + billbean.getB_SumScore() + "', '" + billbean.getB_CrBank() + "', '" + billbean.getB_CrCardAmt() + "', '" + billbean.getB_CrCurPoint() + "',"
                            + " '" + billbean.getB_CrSumPoint() + "', '" + billbean.getB_Entertain1() + "', '" + billbean.getB_VoucherDiscAmt() + "', '" + billbean.getB_VoucherOver() + "', '" + billbean.getB_NetDiff() + "',"
                            + " '" + billbean.getB_SumSetDiscAmt() + "', '" + billbean.getB_DetailFood() + "', '" + billbean.getB_DetailDrink() + "', '" + billbean.getB_DetailProduct() + "', '" + billbean.getB_KicQue() + "',"
                            + " '" + billbean.getB_ROUNDCLOSE() + "', '', '', '', '',"
                            + " '', '', '', '', '',"
                            + " '', '', '','', 'Y');";
                    //insert into website Online Database (billno)
                    try {
//                        MySQLConnectWebOnline myOnline = new MySQLConnectWebOnline();
                        System.out.println(sqlUpdateOnline);
                        stmtServer.executeUpdate(sqlUpdateOnline);

                    } catch (Exception e) {
                        System.out.println(e);
                        ErrorText += "\n";
                        ErrorText += e.toString();
                        txtLogErr.setText(logTab + ErrorText);
                    }

                    String sqlUpdateBillnoSendOnlineFlag = "update billno set b_sendOnline='Y' where b_refno='" + billbean.getB_Refno() + "' and b_macno='" + billbean.getB_MacNo() + "';";
                    stmtLocalUpdate.executeUpdate(sqlUpdateBillnoSendOnlineFlag);
                    System.out.println(sqlUpdateBillnoSendOnlineFlag);
//                    Thread.sleep(10 * 1000);
                }
                System.out.println("Loop Billno Finished;");
                FlageCheckProcess = false;
                ErrorText += "loop Billno Finished Insert";
                rs.close();
                stmtLocalUpdate.close();
            } catch (SQLException e) {
                System.out.println(e);
                ErrorText += e.toString();
                txtLogErr.setText(logTab + ErrorText);
            }
            stmtLocal.close();
            stmtServer.close();
        } catch (SQLException e) {
            ErrorText += e.toString();
            txtLogErr.setText(logTab + ErrorText);
        } finally {
            mysql.close();
            myOnline.close();
        }
    }

    public void uploadT_Sale() {
        try {
            mysql.close();
            mysql.open();
            myOnline.close();
            myOnline.open();

            Statement stmtLocalUpdate = mysql.getConnection().createStatement();
            Statement stmtLocal = mysql.getConnection().createStatement();
            Statement stmtServer = myOnline.getConnection().createStatement();
            String sql = "select * from t_sale where r_sendOnline='N' order by macno,r_refno,r_index;";
            ResultSet rs = stmtLocal.executeQuery(sql);
            TSaleBean bean = new TSaleBean();
//            branchBean = branControl.getBranch();

            while (rs.next()) {
                FlageCheckProcess = true;
                bean.setR_Index(rs.getString("R_Index"));
                bean.setR_Refno(rs.getString("R_Refno"));
                bean.setR_Table(rs.getString("R_Table"));
                bean.setR_Date(rs.getDate("R_Date"));
                bean.setR_Time(rs.getString("R_Time"));
                bean.setMacNo(rs.getString("MacNo"));
                bean.setCashier((rs.getString("Cashier")));
                bean.setR_Emp((rs.getString("R_Emp")));
                bean.setR_PluCode(rs.getString("R_PluCode"));
                bean.setR_PName((rs.getString("R_PName")));
                bean.setR_Unit((rs.getString("R_Unit")));
                bean.setR_Group((rs.getString("R_Group")));
                bean.setR_Status(rs.getString("R_Status"));
                bean.setR_Normal(rs.getString("R_Normal"));
                bean.setR_Discount(rs.getString("R_Discount"));
                bean.setR_Service(rs.getString("R_Service"));
                bean.setR_Stock(rs.getString("R_Stock"));
                bean.setR_Set(rs.getString("R_Set"));
                bean.setR_Vat(rs.getString("R_Vat"));
                bean.setR_Type(rs.getString("R_Type"));
                if (bean.getR_Type() == null || bean.getR_Type().equals("null")) {
                    bean.setR_Type("");
                }
                bean.setR_ETD(rs.getString("R_ETD"));
                bean.setR_Quan(rs.getDouble("R_Quan"));
                bean.setR_Price(rs.getDouble("R_Price"));
                bean.setR_Total(rs.getDouble("R_Total"));
                bean.setR_Type(rs.getString("R_PrType"));
                bean.setR_PrCode(rs.getString("R_PrCode"));
                bean.setR_PrDisc(rs.getDouble("R_PrDisc"));
                bean.setR_PrBath(rs.getDouble("R_PrBath"));
                bean.setR_PrAmt(rs.getDouble("R_PrAmt"));
                bean.setR_PrCuType(rs.getString("R_PrCuType"));
                bean.setR_PrCuCode(rs.getString("R_PrCuCode"));
                bean.setR_PrCuQuan(rs.getDouble("R_PrCuQuan"));
                bean.setR_PrCuAmt(rs.getDouble("R_PrCuAmt"));
                bean.setR_Redule(rs.getDouble("R_Redule"));
                bean.setR_DiscBath(rs.getDouble("R_DiscBath"));
                bean.setR_PrAdj(rs.getDouble("R_PrAdj"));
                bean.setR_PreDisAmt(rs.getDouble("R_PreDisAmt"));
                bean.setR_NetTotal(rs.getDouble("R_NetTotal"));
                bean.setR_Kic(rs.getString("R_Kic"));
                bean.setR_KicPrint(rs.getString("R_KicPrint"));
                bean.setR_Refund(rs.getString("R_Refund"));
                bean.setVoidMsg((rs.getString("VoidMsg")));
                bean.setR_Void(rs.getString("R_Void"));
                bean.setR_VoidUser((rs.getString("R_VoidUser")));
                bean.setR_VoidTime(rs.getString("R_VoidTime"));
                bean.setStkCode(rs.getString("StkCode"));
                bean.setPosStk(rs.getString("PosStk"));
                bean.setR_ServiceAmt(rs.getDouble("R_ServiceAmt"));
                bean.setR_PrChkType(rs.getString("R_PrChkType"));
                bean.setR_PrQuan(rs.getDouble("R_PrQuan"));
                bean.setR_PrSubType(rs.getString("R_PrSubType"));
                bean.setR_PrSubCode(rs.getString("R_PrSubCode"));
                bean.setR_PrSubQuan(rs.getDouble("R_PrSubQuan"));
                bean.setR_PrSubDisc(rs.getDouble("R_PrSubDisc"));
                bean.setR_PrSubBath(rs.getDouble("R_PrSubBath"));
                bean.setR_PrSubAmt(rs.getDouble("R_PrSubAmt"));
                bean.setR_PrSubAdj(rs.getDouble("R_PrSubAdj"));
                bean.setR_PrCuDisc(rs.getDouble("R_PrCuDisc"));
                bean.setR_PrCuBath(rs.getDouble("R_PrCuBath"));
                bean.setR_PrCuAdj(rs.getDouble("R_PrCuAdj"));
                bean.setR_PrChkType2(rs.getString("R_PrChkType2"));
                bean.setR_PrQuan2(rs.getDouble("R_PrQuan2"));
                bean.setR_PrType2(rs.getString("R_PrType2"));
                bean.setR_PrCode2(rs.getString("R_PrCode2"));
                bean.setR_PrDisc2(rs.getDouble("R_PrDisc2"));
                bean.setR_PrBath2(rs.getDouble("R_PrBath2"));
                bean.setR_PrAmt2(rs.getDouble("R_PrAmt2"));
                bean.setR_PrAdj2(rs.getDouble("R_PrAdj2"));
                bean.setR_PItemNo(rs.getInt("R_PItemNo"));
                bean.setR_PKicQue(rs.getInt("R_PKicQue"));
                bean.setR_PrVcType(rs.getString("R_PrVcType"));
                bean.setR_PrVcCode(rs.getString("R_PrVcCode"));
                bean.setR_PrVcAmt(rs.getDouble("R_PrVcAmt"));
                bean.setR_PrVcAdj(rs.getDouble("R_PrVcAdj"));
                bean.setR_MoveFlag(rs.getString("R_MoveFlag"));
                bean.setR_Pause(rs.getString("R_Pause"));
                bean.setR_SPIndex(rs.getString("R_SPIndex"));
                bean.setR_LinkIndex(rs.getString("R_LinkIndex"));
                bean.setR_VoidPause(rs.getString("R_VoidPause"));
                bean.setR_SetPrice(rs.getDouble("R_SetPrice"));
                bean.setR_SetDiscAmt(rs.getDouble("R_SetDiscAmt"));
                bean.setR_MoveItem(rs.getString("R_MoveItem"));
                bean.setR_MoveFrom(rs.getString("R_MoveFrom"));
                bean.setR_MoveUser(ThaiUtil.ASCII2Unicode(rs.getString("R_MoveUser")));
                bean.setR_Opt9((rs.getString("R_Opt9")));
                bean.setR_Opt1((rs.getString("R_Opt1")));
                bean.setR_Opt2((rs.getString("R_Opt2")));
                bean.setR_Opt3((rs.getString("R_Opt3")));
                bean.setR_Opt4((rs.getString("R_Opt4")));
                bean.setR_Opt5((rs.getString("R_Opt5")));
                bean.setR_Opt6((rs.getString("R_Opt6")));
                bean.setR_Opt7((rs.getString("R_Opt7")));
                bean.setR_Opt8((rs.getString("R_Opt8")));
                bean.setR_PrintItemBill(rs.getString("R_PrintItemBill"));
                bean.setR_CountTime(rs.getString("R_CountTime"));
                bean.setR_Return(rs.getString("R_Return"));
                bean.setR_Earn(rs.getString("R_Earn"));
                bean.setR_EarnNo(rs.getString("R_EarnNo"));

                bean.setR_NetDiff(rs.getDouble("R_NetDiff"));
                bean.setR_SendOnline("Y");
                bean.setR_BranchCode(branchBean.getCode());

                if (bean.getR_PrVcType() == null) {
                    bean.setR_PrVcType("");;
                }
                if (bean.getR_PrintItemBill() == null) {
                    bean.setR_PrintItemBill("");;
                }
                if (bean.getR_CountTime() == null) {
                    bean.setR_CountTime("");;
                }
                String sqlUploadTSaleOnline = "INSERT INTO t_sale VALUES("
                        + "'" + bean.getR_Index() + "',"
                        + "'" + bean.getR_Refno() + "',"
                        + "'" + bean.getR_Table() + "',"
                        + "'" + bean.getR_Date() + "',"
                        + "'" + bean.getR_Time() + "',"
                        + "'" + bean.getMacNo() + "',"
                        + "'" + bean.getCashier() + "',"
                        + "'" + bean.getR_Emp() + "',"
                        + "'" + bean.getR_PluCode() + "',"
                        + "'" + bean.getR_PName().replace("'", " ") + "',"
                        + "'" + bean.getR_Unit() + "',"
                        + "'" + bean.getR_Group() + "',"
                        + "'" + bean.getR_Status() + "',"
                        + "'" + bean.getR_Normal() + "',"
                        + "'" + bean.getR_Discount() + "',"
                        + "'" + bean.getR_Service() + "',"
                        + "'" + bean.getR_Stock() + "',"
                        + "'" + bean.getR_Set() + "',"
                        + "'" + bean.getR_Vat() + "',"
                        + "'" + bean.getR_Type() + "',"
                        + "'" + bean.getR_ETD() + "',"
                        + "'" + bean.getR_Quan() + "',"
                        + "'" + bean.getR_Price() + "',"
                        + "'" + bean.getR_Total() + "',"
                        + "'" + bean.getR_Type() + "',"
                        + "'" + bean.getR_PrCode() + "',"
                        + "'" + bean.getR_PrDisc() + "',"
                        + "'" + bean.getR_PrBath() + "',"
                        + "'" + bean.getR_PrAmt() + "',"
                        + "'" + bean.getR_PrCuType() + "',"
                        + "'" + bean.getR_PrCuCode() + "',"
                        + "'" + bean.getR_PrCuQuan() + "',"
                        + "'" + bean.getR_PrCuAmt() + "',"
                        + "'" + bean.getR_Redule() + "',"
                        + "'" + bean.getR_DiscBath() + "',"
                        + "'" + bean.getR_PrAdj() + "',"
                        + "'" + bean.getR_PreDisAmt() + "',"
                        + "'" + bean.getR_NetTotal() + "',"
                        + "'" + bean.getR_Kic() + "',"
                        + "'" + bean.getR_KicPrint() + "',"
                        + "'" + bean.getR_Refund() + "',"
                        + "'" + bean.getVoidMsg() + "',"
                        + "'" + bean.getR_Void() + "',"
                        + "'" + bean.getR_VoidUser() + "',"
                        + "'" + bean.getR_VoidTime() + "',"
                        + "'" + bean.getStkCode() + "',"
                        + "'" + bean.getPosStk() + "',"
                        + "'" + bean.getR_ServiceAmt() + "',"
                        + "'" + bean.getR_PrChkType() + "',"
                        + "'" + bean.getR_PrQuan() + "',"
                        + "'" + bean.getR_PrSubType() + "',"
                        + "'" + bean.getR_PrSubCode() + "',"
                        + "'" + bean.getR_PrSubQuan() + "',"
                        + "'" + bean.getR_PrSubDisc() + "',"
                        + "'" + bean.getR_PrSubBath() + "',"
                        + "'" + bean.getR_PrSubAmt() + "',"
                        + "'" + bean.getR_PrSubAdj() + "',"
                        + "'" + bean.getR_PrCuDisc() + "',"
                        + "'" + bean.getR_PrCuBath() + "',"
                        + "'" + bean.getR_PrCuAdj() + "',"
                        + "'" + bean.getR_PrChkType2() + "',"
                        + "'" + bean.getR_PrQuan2() + "',"
                        + "'" + bean.getR_PrType2() + "',"
                        + "'" + bean.getR_PrCode2() + "',"
                        + "'" + bean.getR_PrDisc2() + "',"
                        + "'" + bean.getR_PrBath2() + "',"
                        + "'" + bean.getR_PrAmt2() + "',"
                        + "'" + bean.getR_PrAdj2() + "',"
                        + "'" + bean.getR_PItemNo() + "',"
                        + "'" + bean.getR_PKicQue() + "',"
                        + "'" + bean.getR_PrVcType() + "',"
                        + "'" + bean.getR_PrVcCode() + "',"
                        + "'" + bean.getR_PrVcAmt() + "',"
                        + "'" + bean.getR_PrVcAdj() + "',"
                        + "'" + bean.getR_MoveFlag() + "',"
                        + "'" + bean.getR_Pause() + "',"
                        + "'" + bean.getR_SPIndex() + "',"
                        + "'" + bean.getR_LinkIndex() + "',"
                        + "'" + bean.getR_VoidPause() + "',"
                        + "'" + bean.getR_SetPrice() + "',"
                        + "'" + bean.getR_SetDiscAmt() + "',"
                        + "'" + bean.getR_MoveItem() + "',"
                        + "'" + bean.getR_MoveFrom() + "',"
                        + "'" + bean.getR_MoveUser() + "',"
                        + "'" + bean.getR_Opt9() + "',"
                        + "'" + bean.getR_Opt1() + "',"
                        + "'" + bean.getR_Opt2() + "',"
                        + "'" + bean.getR_Opt3() + "',"
                        + "'" + bean.getR_Opt4() + "',"
                        + "'" + bean.getR_Opt5() + "',"
                        + "'" + bean.getR_Opt6() + "',"
                        + "'" + bean.getR_Opt7() + "',"
                        + "'" + bean.getR_Opt8() + "',"
                        + "'" + bean.getR_PrintItemBill() + "',"
                        + "'" + bean.getR_CountTime() + "',"
                        + "'" + bean.getR_Return() + "',"
                        + "'" + bean.getR_Earn() + "',"
                        + "'" + bean.getR_EarnNo() + "',"
                        + "'" + bean.getR_NetDiff() + "',"
                        + "'" + bean.getR_SendOnline() + "',"
                        + "'" + bean.getR_BranchCode() + "')";
//                stkfileUpdate(bean.getR_PluCode());
                try {
//                    MySQLConnectWebOnline myOnline = new MySQLConnectWebOnline();

                    stmtServer.executeUpdate(sqlUploadTSaleOnline);
                    System.out.println(sqlUploadTSaleOnline);
                } catch (Exception e) {
//                    MSG.NOTICE(e.toString());
                    ErrorText += e.toString();
                    txtLogErr.setText(logTab + ErrorText);
                    System.out.println(e.toString());
                    FlageCheckProcess = false;
                }
                try {
                    String sqlUpdateTSaleSendOnlineFlag = "update t_sale "
                            + "set r_sendOnline='Y' "
                            + "where R_refno='" + bean.getR_Refno() + "' "
                            + "and r_index='" + bean.getR_Index() + "' "
                            + "and macno='" + bean.getMacNo() + "';";
                    stmtLocalUpdate.executeUpdate(sqlUpdateTSaleSendOnlineFlag);
                    System.out.println(sqlUpdateTSaleSendOnlineFlag);
                } catch (SQLException e) {
                    ErrorText += e.toString();
                    txtLogErr.setText(logTab + ErrorText);
                    System.out.println(e);
                    ErrorText += e.toString();
                    txtLogErr.setText(logTab + ErrorText);
                }
                Thread.sleep(90);
            }
            stmtLocalUpdate.close();
            stmtServer.close();
            stmtLocal.close();
            System.out.println("Loop T_Sale Finished;");
            FlageCheckProcess = false;
            rs.close();
            Thread.sleep(10 * 1000);
//            uploadCheckConfig();
        } catch (InterruptedException | SQLException e) {
            System.out.println(e);
            ErrorText += e.toString();
            txtLogErr.setText(logTab + ErrorText);
        } finally {
            mysql.close();
            myOnline.close();
        }
    }

    public void uploadCreditFile() {
        try {
            mysql.close();
            mysql.open();
            myOnline.close();
            myOnline.open();

            Statement stmtLocal = mysql.getConnection().createStatement();
            Statement stmtServer = myOnline.getConnection().createStatement();
            String sqlGetCreditFile = "select crcode,crname from creditfile order by crcode;";
            ResultSet rsCredit = stmtLocal.executeQuery(sqlGetCreditFile);
            String creditCode = "";
            String creditName = "";
            String delCreditFile = "delete from creditfile;";
            stmtServer.executeUpdate(delCreditFile);
            while (rsCredit.next()) {
                creditCode = rsCredit.getString("crcode");
                creditName = (rsCredit.getString("crname"));
                try {
                    String sqlUploadCreditFile = "INSERT INTO creditfile "
                            + "VALUES('" + creditCode + "', '', '" + creditName + "', 'N', '0.00', '0.00', '', '1');";
                    stmtServer.executeUpdate(sqlUploadCreditFile);
                    System.out.println(sqlUploadCreditFile);
                } catch (SQLException e) {
                    System.out.println(e);
                    ErrorText += e.toString();
                    txtLogErr.setText(logTab + ErrorText);
                }
            }
            rsCredit.close();
            stmtLocal.close();
            stmtServer.close();
        } catch (SQLException e) {
            System.out.println(e);
            ErrorText += e.toString();
            txtLogErr.setText(logTab + ErrorText);
        } finally {
            mysql.close();
            myOnline.close();
        }
    }

    private void uploadGroupFile() {
        try {
            mysql.close();
            mysql.open();
            myOnline.close();
            myOnline.open();

            Statement stmtLocal = mysql.getConnection().createStatement();
            Statement stmtServer = myOnline.getConnection().createStatement();
            Statement stmtServerDel = myOnline.getConnection().createStatement();
            String sqlGetGroupFile = "select groupcode,groupname from groupfile order by groupcode;";
            ResultSet rsGroupFile = stmtLocal.executeQuery(sqlGetGroupFile);
            String groupCode = "";
            String groupName = "";
            String delGroupFile = "delete from groupfile;";
            stmtServerDel.executeUpdate(delGroupFile);
            while (rsGroupFile.next()) {
                groupCode = rsGroupFile.getString("groupcode");
                groupName = (rsGroupFile.getString("groupname"));
                try {
                    String sqlUploadCreditFile = "INSERT INTO groupfile VALUES('" + groupCode + "', '" + groupName + "');";
                    stmtServer.executeUpdate(sqlUploadCreditFile);
                    System.out.println(sqlUploadCreditFile);
                } catch (Exception e) {
                    System.out.println(e);
                    ErrorText += e.toString();
                    txtLogErr.setText(logTab + ErrorText);
                }
            }
            stmtServerDel.close();
            rsGroupFile.close();
            stmtLocal.close();
            stmtServer.close();
        } catch (SQLException e) {
            System.out.println(e);
            ErrorText += e.toString();
            txtLogErr.setText(logTab + ErrorText);
        } finally {
            mysql.close();
            myOnline.close();
        }
    }

    private void uploadProtab() {
        try {
            mysql.close();
            myOnline.close();
            mysql.open();
            myOnline.open();
            Statement stmtLocal = mysql.getConnection().createStatement();
            Statement stmtServer = myOnline.getConnection().createStatement();
            Statement stmtServerDel = myOnline.getConnection().createStatement();
            String sqlGetProtab = "select procode,prodesc from protab order by procode;";
            ResultSet rsProtab = stmtLocal.executeQuery(sqlGetProtab);
            String groupCode = "";
            String groupName = "";
            String delCreditFile = "delete from protab;";
            stmtServerDel.executeUpdate(delCreditFile);
            while (rsProtab.next()) {
                groupCode = rsProtab.getString("procode");
                groupName = (rsProtab.getString("prodesc")).replace("'", " ");
                try {
                    String sqlUploadCreditFile = "INSERT INTO protab VALUES('" + groupCode + "', '" + groupName + "');";
                    stmtServer.executeUpdate(sqlUploadCreditFile);
                    System.out.println(sqlUploadCreditFile);
                } catch (SQLException e) {
                    System.out.println(e);
                    MSG.NOTICE(e.toString());
                    ErrorText += e.toString();
                    txtLogErr.setText(logTab + ErrorText);
                }
            }
            rsProtab.close();
        } catch (SQLException e) {
            System.out.println(e);
            ErrorText += e.toString();
            txtLogErr.setText(ErrorText);
        } finally {
            mysql.close();
            myOnline.close();
        }
    }

    private void uploadMaster() {
        try {
            System.out.println("Uploading Master File");
            uploadCreditFile();
            uploadGroupFile();
            uploadProtab();

            Thread.sleep(10 * 1000);
        } catch (InterruptedException e) {
            System.out.println(e);
            ErrorText += e.toString();
            txtLogErr.setText(ErrorText);
        }
    }

    private void checkBillVoid() {
        try {
            mysql.close();
            myOnline.close();
                    
            mysql.open();
            myOnline.open();

            Statement stmtLocal = mysql.getConnection().createStatement();
            Statement stmtServerBillno = myOnline.getConnection().createStatement();
            Statement stmtServerTSale = myOnline.getConnection().createStatement();
            String sql = "select b_void,b_refno,b_macno from billno where b_void='V' and void_sendOnline='N';";
            ResultSet rs = stmtLocal.executeQuery(sql);
            FlageCheckProcess = true;

            while (rs.next()) {
                FlageCheckProcess = true;
                String b_refno = rs.getString("B_Refno");
                String b_macno = rs.getString("B_Macno");
                String sqlUpdateBillno = "update billno set b_void='V' where b_refno='" + b_refno + "' and b_macno='" + b_macno + "';";
                String sqlUpdateT_sale = "update t_sale set r_refund='V' where r_refno='" + b_refno + "' and macno='" + b_macno + "';";
                String sqlUpdateFlageVoidOnline = "update billno set void_sendOnline='Y' where b_refno='" + b_refno + "';";
                stmtServerBillno.executeUpdate(sqlUpdateBillno);
                stmtLocal.executeUpdate(sqlUpdateFlageVoidOnline);
                stmtServerTSale.executeUpdate(sqlUpdateT_sale);
                System.out.println(sqlUpdateBillno);
                System.out.println(sqlUpdateT_sale);

                //update Stock Stkfile server
//                String sqlGetSTKFILELocal = "select r_plucode,r_quan from t_sale where r_refno='" + b_refno + "';";
//                ResultSet rs1 = stmtLocal.executeQuery(sqlGetSTKFILELocal);
//                while (rs1.next()) {
//                    stkfileUpdate(rs1.getString("bpcode"));
//                }
//                rs1.close();
            }
            rs.close();
            FlageCheckProcess = false;
            stmtLocal.close();
            stmtServerBillno.close();
            stmtServerTSale.close();
            System.out.println("Loop Bill Void Finished;");
        } catch (SQLException e) {
            txtLogErr.setText(ErrorText + e);
        } finally {
            mysql.close();
            myOnline.close();
        }

    }

//    public void uploadSQL() {
//        try {
//            ExportSQLImportSQL exim = new ExportSQLImportSQL();
//            SendSQLToFTP sendFtp = new SendSQLToFTP();
//            exim.deleteFile();
//            exim.exportSQL();
//            Thread.sleep(1000 * 10);
//            sendFtp.SendSQLToFTP();
//            exim.uploadSQL();
//        } catch (Exception e) {
//            MSG.NOTICE(e.toString());
//        }
//    }
//    public void stkfileUpdate(String pcode) {
//        try {
////            c.open();
////            myOnline.open();
//            String sqlIns = "INSERT INTO stkfile "
//                    + "(BPCode, BStk, BQty, BAmt, BTotalAmt, BQty0, BQty1, BQty2, BQty3, BQty4, BQty5, BQty6, BQty7, BQty8, BQty9, BQty10, BQty11, BQty12, BQty13, BQty14, BQty15, BQty16, BQty17, BQty18, BQty19, BQty20, BQty21, BQty22, BQty23, BQty24) "
//                    + "VALUES ("
//                    + "'" + pcode + "', 'A1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0');";
//            Statement stmt = c.getConnection().createStatement();
//            Statement stmtOnline = myOnline.getConnection().createStatement();
//            stmtOnline.executeUpdate(sqlIns);
//
//            String sqlGetStkfileLocl = "select bqty24 from stkfile where BPCode='" + pcode + "';";
//            ResultSet rs = stmt.executeQuery(sqlGetStkfileLocl);
//            double bqty = 0;
//            if (rs.next()) {
//                bqty = rs.getDouble("bqty24");
//            } else {
//                bqty = 0;
//            }
//            String sqlUpdateOnline = "update stkfile set bqty24='" + bqty + "' where BPCode='" + pcode + "';";
//            stmtOnline.executeUpdate(sqlUpdateOnline);
//            rs.close();
//
//            stmt.close();
//            stmtOnline.close();
////            c.close();
////            myOnline.close();
//        } catch (Exception e) {
////            MSG.NOTICE(e.toString());
//        }
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Api_RealTimeSales dialog = new Api_RealTimeSales();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnUpload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextArea txtLogErr;
    // End of variables declaration//GEN-END:variables
}
