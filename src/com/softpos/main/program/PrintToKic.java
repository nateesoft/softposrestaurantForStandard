package com.softpos.main.program;

import com.softpos.pos.core.controller.BranchControl;
import com.softpos.crm.pos.core.modal.PublicVar;
import com.softpos.pos.core.controller.PrintToKicController;
import com.softpos.pos.core.controller.Value;
import com.softpos.pos.core.model.BalanceBean;
import com.softpos.pos.core.model.BranchBean;
import database.ConfigFile;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.Timer;
import printReport.PrintSimpleForm;
import util.MSG;

/**
 *
 * @author Dell-Softpos
 */
public class PrintToKic extends javax.swing.JFrame {

    private String tableNo = "";
    private int refresh = 10;
    private boolean kicPrintting = false;
    private boolean printkic = false;
    private final PrintToKicController control = new PrintToKicController();

    /**
     * Creates new form PrintToKic
     *
     * @param parent
     * @param modal
     */
    public PrintToKic(java.awt.Frame parent, boolean modal) {
        initComponents();

        BranchBean branchBean = BranchControl.getData();
        String config = branchBean.getSaveOrder();
        lblProcessLog.setText("Log! : ");
        if (!config.equals("N")) {
            PublicVar.Branch_Saveorder = config;
        }

        printkic = Boolean.parseBoolean(ConfigFile.getProperties("printkic"));
        lblProcessShow.setText("สถานะการพิมพ์");
        setState(JFrame.ICONIFIED);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        ActionListener timerListener = (ActionEvent e) -> {
            if (printkic == true) {
                System.out.println("PROCESS " + refresh + "sec");
                new Thread(() -> {
                    kicPrintFromPDA();
                }).start();
            }
        };
        if (refresh < 0) {
            refresh = 10;
        }
        Timer timer = new Timer(refresh * 1000, timerListener);
        timer.start();
    }

    private void loadStatus() {
        //check ftp file date
        try {
            pbCheckUpdate.setStringPainted(true);
            pbCheckUpdate.setMinimum(0);
            pbCheckUpdate.setMaximum(100);
            for (int i = 1; i <= 100; i++) {
                pbCheckUpdate.setValue(i);
                pbCheckUpdate.setString("LOADDING Data: (" + i + " %)");
                try {
                    Thread.sleep(25);
                } catch (InterruptedException e) {
                }
            }

            pbCheckUpdate.setString("Load data Complete ");
            Thread.sleep(25);
            for (int i = 100; i >= 0; i--) {
                pbCheckUpdate.setValue(i);
                pbCheckUpdate.setString("LOADDING Data: (" + i + " %)");
                try {
                    Thread.sleep(25);
                } catch (InterruptedException e) {
                }
            }
        } catch (InterruptedException e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pbCheckUpdate = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lblProcessShow = new javax.swing.JLabel();
        lblProcessLog = new javax.swing.JLabel();

        setTitle("Print To Kic @Softpos");
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        pbCheckUpdate.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Print_Button.jpg"))); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 153, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PROCESSING: PDA-Document @ Softpos Java 10:14 20220331");

        jButton1.setBackground(new java.awt.Color(204, 0, 0));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("-");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 0, 0));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("X");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblProcessShow.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblProcessShow.setText("jLabel3");

        lblProcessLog.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblProcessLog.setText("jLabel3");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(pbCheckUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblProcessShow, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblProcessLog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbCheckUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProcessShow, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProcessLog, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (MSG.CONF(this, "ต้องการออกจากโปรแกรม Print PDA หรือไม่")) {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void kicPrintFromPDA() {
        if (kicPrintting == false) {
            BalanceBean balanceBean = control.getBalaneForPDA();
            if (balanceBean != null) {
                System.out.println("Found data to print");
                lblProcessLog.setText("Total Bill: " + balanceBean.getR_Total());
                if (kicPrintting == false) {
                    kicPrintting = true;
                    tableNo = balanceBean.getR_Table();
                    lblProcessShow.setText("กำลังพิมพ์ข้อมูล โต๊ะ : " + balanceBean.getR_Table());

                    kichenPrint(balanceBean.getR_Table());
                }
            } else {
                kicPrintting = false;
            }
        }
    }

    private void kichenPrint(String tableNo) {
        PrintSimpleForm printSimpleForm = new PrintSimpleForm();
        String printerName;
        String[] kicMaster = BranchControl.getKicData20();
        // หาจำนวนปริ้นเตอร์ว่าต้องออกกี่เครื่อง
        List<BalanceBean> listBalance = control.getBalaneForPDAByTableNo(tableNo);
        if (!PublicVar.Branch_Saveorder.equals("N")) {
            printSimpleForm.KIC_FORM_SaveOrder("", "SaveOrder", tableNo, 0);
        }
        //วนคำสั่งเพื่อพิมพ์ให้ครบทุกครัว
        for (BalanceBean balanceBean : listBalance) {
            kicPrintting = true;
            loadStatus();
            String rKic = balanceBean.getR_Kic();
            if (!rKic.equals("")) {
                int iKic = Integer.parseInt(rKic);
                if (iKic - 1 < 0) {
                    //ถ้าเป็น iKic=0 จะเป็นการไม่กำหนดให้ปริ้นออกครัว
                } else {
                    if (kicMaster[iKic - 1].equals("N")) {
                        //NOT PRINT or Print already
                    } else {
                        printerName = "kic" + rKic;
                        String printerForm = BranchControl.getForm(rKic);
                        switch (printerForm) {
                            case "1":
                                List<BalanceBean> listForm1 = control.getBalancePrintForm1(tableNo, rKic);
                                printerName = "kic" + rKic;
                                for (BalanceBean bean : listForm1) {
                                    String PCode = bean.getR_PluCode();
                                    if (printerForm.equals("1")) {
                                        if (Value.printkic) {
                                            printSimpleForm.KIC_FORM_1(printerName, tableNo, new String[]{PCode});
                                        }
                                    }
                                }
                                break;
                            case "6":
                                List<BalanceBean> listForm6 = control.getBalancePrintForm6(tableNo, rKic);
                                for (BalanceBean bean : listForm6) {
                                    kicPrintting = true;
                                    if (Value.printkic) {
                                        double qty = bean.getR_Quan();
                                        double total = bean.getR_Total();
                                        String r_plucode = bean.getR_PluCode();
                                        String R_Index = bean.getR_Index();
                                        printSimpleForm.KIC_FORM_6(printerName, tableNo, R_Index, r_plucode, qty, total);
                                    }
                                }
                                break;
                            case "3":
                            case "4":
                            case "5":
                                if (printerForm.equals("3")) {
                                    if (Value.printkic) {
                                        String retd = balanceBean.getR_ETD();
                                        printSimpleForm.KIC_FORM_3New(printerName, tableNo, iKic, retd, "PDA");
                                    }
                                } else if (printerForm.equals("4")) {
                                    if (Value.printkic) {
                                        printSimpleForm.KIC_FORM_4(printerName, tableNo);
                                    }
                                } else if (printerForm.equals("5")) {
                                    if (Value.printkic) {
                                        printSimpleForm.KIC_FORM_5(printerName, tableNo);
                                    }
                                }
                                break;
                            case "7":
                            case "2":
                                if (Value.printkic) {
                                    printSimpleForm.KIC_FORM_7(printerName, tableNo);
                                }
                                break;
                            default:
                                MSG.ERR(this, "ไม่พบฟอร์มปริ้นเตอร์ครัวในระบบที่สามารใช้งานได้ !!!");
                                break;
                        }
                    }
                }
            }
        }
        //update r_kicprint
        String sql = "update balance "
                + "set r_kicprint='P',"
                + "r_pause='Y' "
                + "where r_table='" + tableNo + "' "
                + "and r_kicprint<>'P' "
                + "and r_printOk='Y' "
                + "and r_kic<>'';";
        control.execUpdate(sql);
        kicPrintting = false;
    }

    public static void main(String args[]) {
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PrintToKic dialog = new PrintToKic(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblProcessLog;
    private javax.swing.JLabel lblProcessShow;
    private javax.swing.JProgressBar pbCheckUpdate;
    // End of variables declaration//GEN-END:variables
}
